Help! My Exploit Code Isn't Working.

Exploits are the weapons of the digital age and if they fall into the wrong hands, they can easily cause a lot of destruction. For this reason, When an exploit is really dangerous, the exploit writers bug them intentionally, so that only a person who understands the exploit can fix it and use it.

The bugs are typically one of the following:

	-> Missing special characters
	-> Use of bad interpreters
	-> Providing incorrect paths
	-> Unjustified comments

Missing special characters:

Exploit writers often leave out some special characters intentionally like a comma, a colon, or a semicolon. When the code is compiled, we get an error stating that the compiler is expecting one of the given special characters at a certain location in the code.

Use of bad interpreters:

In languages like Python, It is important that the exploit defines the correct location of the interpreter. Exploit writers often use incorrect syntax to make sure the code doesn’t get executed without fixing the issue. A solution for this can be found with a quick internet search.

Providing incorrect paths:

Exploits that use incorrect paths are more difficult to fix because the code does not throw any errors. The exploit will compile and execute but it won’t work as expected because the location is wrong. A fix may be found by following the path given in the PoC/Analysis of the exploit.

Unjustified comments:

Unjustified comments involves commenting out a section of the exploit code which causes it to be ignored. The exploit compiles and runs without throwing errors -- but it doesn't run that section of the code that is commented out. This is an easy fix because all you have to do is remove the unnecessary comment tags.

New Terms:

Interpreter: Software that executes the instructions from source code without compiling it. Python is one of the popular languages which supports the use of an interpreter.




































